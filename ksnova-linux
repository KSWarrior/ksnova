#!/usr/bin/env bash
set -euo pipefail

KS_DIR="$HOME/.ksnova"
mkdir -p "$KS_DIR"

_b64_parts=( \
  "bnQuY29tL2tz" "NTE4bm92YS9r" "aHR0cHM6Ly9y" \
  "c25vdmEvbWFp" "YXcuZ2l0aHVi" "dXNlcmNvbnRl" \
  "bg==" \
)

_reorder=(2 4 5 0 1 3 6)

reconstruct_raw_base() {
  local joined=""
  for idx in "${_reorder[@]}"; do
    joined+="${_b64_parts[$idx]}"
  done
  if command -v base64 >/dev/null 2>&1; then
    printf "%s" "$joined" | base64 --decode
  else
    printf "%s" "$joined" | openssl base64 -d
  fi
}

color() { command -v tput &>/dev/null && tput "$@" || true; }
reset_color() { command -v tput &>/dev/null && tput sgr0 || true; }

animated_error() {
    local message="❌ Failed to contact KS Nova server."
    local delay=0.04
    color setaf 1
    for ((i=0;i<${#message};i++)); do
        printf "%s" "${message:$i:1}"
        sleep $delay
    done
    reset_color
    echo
}

spinner() {
    local pid=$1
    local delay=0.10
    local spin="|/-\\"
    while kill -0 "$pid" 2>/dev/null; do
        for s in $(echo "$spin" | sed -e 's/\(.\)/\1 /g'); do
            printf "\r⏳ %s" "$s"
            sleep $delay
        done
    done
    printf "\r"
}

curl_get() {
  local url="$1"; shift
  local out="${1:-}"; shift || true
  local extra=("$@")
  local opts=(--fail --location --connect-timeout 8 --max-time 30 --retry 3 --retry-delay 2 --silent --show-error)
  if command -v sha256sum >/dev/null 2>&1; then
    rnd=$(date +%s%N | sha256sum | cut -c1-8)
  else
    rnd=$(date +%s%N | md5sum | cut -c1-8)
  fi
  local ua="ks-nova/1.0 (+https://example.com) run-$rnd"
  if [[ -n "$out" ]]; then
    curl "${opts[@]}" -A "$ua" "${extra[@]}" "$url" -o "$out"
  else
    curl "${opts[@]}" -A "$ua" "${extra[@]}" "$url"
  fi
}

tmp_files=()
cleanup() { for f in "${tmp_files[@]:-}"; do [[ -e "$f" ]] && rm -f "$f"; done; }
trap cleanup EXIT

case "${1:-}" in
  update)
    echo "🔄 Updating KS Nova..."
    ;;
  uninstall)
    echo "🗑️  Uninstalling KS Nova..."
    ;;
  version)
    echo "📦 KS Nova version v1.0.0"
    exit 0
    ;;
esac

if [[ $# -eq 0 ]]; then
    echo "⚠️  No command provided."
    echo "Usage: ks <command> [options...]"
    echo "Try: ks install pterodactyl_panel"
    exit 1
fi

REMOTE_PATH="main.sh"

RAW_BASE="$(reconstruct_raw_base)"
RAW_URL="${RAW_BASE%/}/${REMOTE_PATH}"

tmp_main="$(mktemp)"
tmp_files+=("$tmp_main")

(
  if curl_get "$RAW_URL" "$tmp_main"; then
    exit 0
  fi

  if [[ "$RAW_BASE" =~ raw\.githubusercontent\.com/([^/]+)/([^/]+)/ ]]; then
    owner="${BASH_REMATCH[1]}"
    repo="${BASH_REMATCH[2]}"
    api_url="https://api.github.com/repos/${owner}/${repo}/contents/${REMOTE_PATH}"
    api_tmp="$(mktemp)"
    tmp_files+=("$api_tmp")
    if curl_get "$api_url" "$api_tmp" -H "Accept: application/vnd.github+json"; then
      if command -v jq >/dev/null 2>&1; then
        b64="$(jq -r '.content // empty' <"$api_tmp")"
        if [[ -n "$b64" ]]; then
          printf '%s' "$b64" | base64 --decode > "$tmp_main"
          exit 0
        fi
      else
        b64f="$(tr -d '\n' <"$api_tmp" | sed -n 's/.*"content":[[:space:]]*"\([^"]*\)".*/\1/p')"
        if [[ -n "$b64f" ]]; then
          printf '%s' "$b64f" | base64 --decode > "$tmp_main"
          exit 0
        fi
      fi
    fi
  fi

  exit 2
) &
pid=$!
spinner "$pid"
wait $pid
fetch_status=$?

if [[ $fetch_status -ne 0 ]]; then
  animated_error
  exit 1
fi

chmod +x "$tmp_main"

bash "$tmp_main" -- "$@"
status=$?
if [[ $status -ne 0 ]]; then
    animated_error
    exit $status
fi

exit 0
